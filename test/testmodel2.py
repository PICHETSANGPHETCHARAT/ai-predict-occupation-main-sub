import pandas as pd
import numpy as np
from sklearn.model_selection import cross_val_score, StratifiedKFold
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics.pairwise import cosine_similarity

# üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
file_path = "Updated_Occupation_Titles.csv"  # üîÑ ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
df = pd.read_csv(file_path, encoding="utf-8")

# üîπ ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ NaN ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
df = df.dropna()
df["‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô"] = df["‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô"].str.replace(r"[^\w\s]", "", regex=True)

# üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
le_occupation = LabelEncoder()
le_sub_occupation = LabelEncoder()

df["occupation_id_encoded"] = le_occupation.fit_transform(df["occupation_id"])
df["occupation_sub_id_encoded"] = le_sub_occupation.fit_transform(df["occupation_sub_id"])

# üîπ ‡πÉ‡∏ä‡πâ TF-IDF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df["‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô"])
y_main = df["occupation_id_encoded"]
y_sub = df["occupation_sub_id_encoded"]

# üî• **‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà 1: ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å**
rf_main = RandomForestClassifier(n_estimators=200, max_depth=10, random_state=42)

# **‡πÉ‡∏ä‡πâ Cross Validation 5-Fold ‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å**
cv_main = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
cv_score_main = cross_val_score(rf_main, X, y_main, cv=cv_main)
rf_main.fit(X, y_main)

print(f"üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å (Cross Validation): {np.mean(cv_score_main):.2f}")

# üî• **‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà 2: ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å**
sub_category_models = {}
cv_score_sub = {}

for main_category in df["occupation_id_encoded"].unique():
    df_sub = df[df["occupation_id_encoded"] == main_category]

    X_sub = vectorizer.transform(df_sub["‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô"])
    y_sub = df_sub["occupation_sub_id_encoded"]

    rf_sub = RandomForestClassifier(n_estimators=200, max_depth=10, random_state=42)

    # üîπ ‡πÉ‡∏ä‡πâ Cross Validation 5-Fold ‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å
    cv_sub = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
    scores = cross_val_score(rf_sub, X_sub, y_sub, cv=cv_sub)

    # üîπ ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Cross Validation
    rf_sub.fit(X_sub, y_sub)

    sub_category_models[main_category] = rf_sub
    cv_score_sub[main_category] = np.mean(scores)

# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
def predict_job_category(job_title):
    job_vector = vectorizer.transform([job_title])
    
    # üî• ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
    main_category_encoded = rf_main.predict(job_vector)[0]
    main_category = le_occupation.inverse_transform([main_category_encoded])[0]

    # üîπ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏´‡∏•‡∏±‡∏Å
    main_category_name = df[df["occupation_id"] == main_category]["‡∏™‡∏≤‡∏Ç‡∏≤‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏´‡∏•‡∏±‡∏Å"].values
    main_category_name = main_category_name[0] if len(main_category_name) > 0 else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"

    # üî• ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ)
    if main_category_encoded in sub_category_models:
        sub_model = sub_category_models[main_category_encoded]
        sub_category_encoded = sub_model.predict(job_vector)[0]
        sub_category = le_sub_occupation.inverse_transform([sub_category_encoded])[0]

        # üîπ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏£‡∏≠‡∏á
        sub_category_name = df[df["occupation_sub_id"] == sub_category]["‡∏™‡∏≤‡∏Ç‡∏≤‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏£‡∏≠‡∏á"].values
        sub_category_name = sub_category_name[0] if len(sub_category_name) > 0 else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    else:
        sub_category_name = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏á‡πÑ‡∏î‡πâ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)"

    return main_category, main_category_name, sub_category, sub_category_name

# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Cosine Similarity
def find_similar_jobs(job_title, top_n=3):
    job_vector = vectorizer.transform([job_title])
    similarities = cosine_similarity(job_vector, X).flatten()

    # üîé ‡∏Ñ‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0.2
    similar_indices = np.argsort(similarities)[::-1]
    similar_indices = [i for i in similar_indices if similarities[i] > 0.2][:top_n]

    similar_jobs = df.iloc[similar_indices][["‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô", "occupation_id", "‡∏™‡∏≤‡∏Ç‡∏≤‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏´‡∏•‡∏±‡∏Å"]].copy()
    similar_jobs["similarity_score"] = similarities[similar_indices]

    return similar_jobs

# üî• ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Terminal ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ
while True:
    job_example = input("\nüîé ‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏û‡∏¥‡∏°‡∏û‡πå 'q' ‡∏´‡∏£‡∏∑‡∏≠ 'exit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å): ")

    if job_example.lower() in ["q", "exit"]:
        print("üëã ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        break

    predicted_main, predicted_main_name, predicted_sub, predicted_sub_name = predict_job_category(job_example)

    print(f"\n‚úÖ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á '{job_example}' ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏Å: {predicted_main} ({predicted_main_name}) ‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≠‡∏á: {predicted_sub} ({predicted_sub_name})")

    similar_jobs = find_similar_jobs(job_example)

    print("\nüîç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô:")
    print(similar_jobs.sort_values(by="similarity_score", ascending=False).to_string(index=False))